<UserControl x:Class="SpectralAveragingGUI.AveragingMainPageView"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 
             xmlns:local="clr-namespace:SpectralAveragingGUI"
             mc:Ignorable="d" 
             d:DesignHeight="750" d:DesignWidth="700">
    <UserControl.Resources>
        <SolidColorBrush x:Key="ProgressBar.Progress" Color="#FF06B025"/>
        <SolidColorBrush x:Key="ProgressBar.Background" Color="#FFE6E6E6"/>
        <SolidColorBrush x:Key="ProgressBar.Border" Color="#FFBCBCBC"/>
        <Style x:Key="ProgressBarStyle1" TargetType="{x:Type ProgressBar}">
            <Setter Property="Foreground" Value="{StaticResource ProgressBar.Progress}"/>
            <Setter Property="Background" Value="{StaticResource ProgressBar.Background}"/>
            <Setter Property="BorderBrush" Value="{StaticResource ProgressBar.Border}"/>
            <Setter Property="BorderThickness" Value="1"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type ProgressBar}">
                        <Grid x:Name="TemplateRoot">
                            <VisualStateManager.VisualStateGroups>
                                <VisualStateGroup x:Name="CommonStates">
                                    <VisualState x:Name="Determinate"/>
                                    <VisualState x:Name="Indeterminate">
                                        <Storyboard RepeatBehavior="Forever">
                                            <DoubleAnimationUsingKeyFrames Storyboard.TargetName="Animation" Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleX)">
                                                <EasingDoubleKeyFrame KeyTime="0" Value="0.25"/>
                                                <EasingDoubleKeyFrame KeyTime="0:0:1" Value="0.25"/>
                                                <EasingDoubleKeyFrame KeyTime="0:0:2" Value="0.25"/>
                                            </DoubleAnimationUsingKeyFrames>
                                            <PointAnimationUsingKeyFrames Storyboard.TargetName="Animation" Storyboard.TargetProperty="(UIElement.RenderTransformOrigin)">
                                                <EasingPointKeyFrame KeyTime="0" Value="-0.5,0.5"/>
                                                <EasingPointKeyFrame KeyTime="0:0:1" Value="0.5,0.5"/>
                                                <EasingPointKeyFrame KeyTime="0:0:2" Value="1.5,0.5"/>
                                            </PointAnimationUsingKeyFrames>
                                        </Storyboard>
                                    </VisualState>
                                </VisualStateGroup>
                            </VisualStateManager.VisualStateGroups>
                            <Border Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" 
                                    BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="10"/>
                            <Rectangle x:Name="PART_Track"/>
                            <Grid x:Name="PART_Indicator" ClipToBounds="true" HorizontalAlignment="Left">
                                <Rectangle x:Name="Indicator" Fill="{TemplateBinding Foreground}" RadiusX="10" RadiusY="10"/>
                                <Rectangle x:Name="Animation" Fill="{TemplateBinding Foreground}" RenderTransformOrigin="0.5,0.5" RadiusX="10" RadiusY="10">
                                    <Rectangle.RenderTransform>
                                        <TransformGroup>
                                            <ScaleTransform/>
                                            <SkewTransform/>
                                            <RotateTransform/>
                                            <TranslateTransform/>
                                        </TransformGroup>
                                    </Rectangle.RenderTransform>
                                </Rectangle>
                            </Grid>
                        </Grid>
                        <ControlTemplate.Triggers>
                            <Trigger Property="Orientation" Value="Vertical">
                                <Setter Property="LayoutTransform" TargetName="TemplateRoot">
                                    <Setter.Value>
                                        <RotateTransform Angle="-90"/>
                                    </Setter.Value>
                                </Setter>
                            </Trigger>
                            <Trigger Property="IsIndeterminate" Value="true">
                                <Setter Property="Visibility" TargetName="Indicator" Value="Collapsed"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
    </UserControl.Resources>

    <Grid Background="{StaticResource BackgroundLightBrush}" 
          d:DataContext="{x:Static local:AveragingMainPageModel.Instance}">

        <Grid.RowDefinitions>
            <!-- spectra handling area -->
            <RowDefinition Height="*" />
            <!-- progress bar -->
            <RowDefinition Height="Auto" />
            <!-- averaging options label -->
            <RowDefinition Height="Auto" />
            <!-- averaging options groupboxes -->
            <RowDefinition Height="Auto" />
            <!-- averaging options boxes -->
            <RowDefinition Height="Auto" />
            <!-- bottom buttons -->
            <RowDefinition Height="Auto" />
        </Grid.RowDefinitions>

        <Grid.ColumnDefinitions>
            <ColumnDefinition Width="*" />
            <ColumnDefinition Width="*" />
        </Grid.ColumnDefinitions>
        
        <!-- Specta File Handling Area -->
        <Grid Grid.Column="0" Grid.Row="0" Grid.ColumnSpan="2">

            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="3*" />
                <ColumnDefinition Width="*" />
            </Grid.ColumnDefinitions>

            <!-- File List -->
            <Label Content="Specta Files" FontFamily="{StaticResource LatoRegular}" Margin="5 0 0 0"/>
            <Border Grid.Column="0" Grid.Row="0"  Margin="10 24 10 10" BorderThickness="2"
                    BorderBrush="{StaticResource ForegroundMainBrush}">
                <DataGrid   AllowDrop="True"  Background="{StaticResource BackgroundVeryLightBrush}"
                            local:FileDragDropHelper.IsFileDragDropEnabled="True" AutoGenerateColumns="False"
                            local:FileDragDropHelper.FileDragDropTarget="{Binding}"
                            ItemsSource="{Binding SpectraNames}" VerticalScrollBarVisibility="Visible"
                            HeadersVisibility="None" SelectedCellsChanged="DataGrid_OnSelectedCellsChanged">
                    <DataGrid.Columns>
                        <DataGridTextColumn Header="File Name" Binding="{Binding}" Width="*" />
                    </DataGrid.Columns>
                </DataGrid>
            </Border>

            <!-- Spectra Handling Buttons -->
            <StackPanel Grid.Column="1" VerticalAlignment="Center" Margin="10">
                <Button Name="AddSpectraButton" Style="{StaticResource SpectraHandlingButton}" Content="Add" 
                        Command="{Binding AddSpectraCommand}"/>
                <Button Name="RemoveSpectraButton" Style="{StaticResource SpectraHandlingButton}" Content="Remove"
                        Command="{Binding RemoveSpectraCommand}" />
                <Button Name="RemoveAllSpectraButton" Style="{StaticResource SpectraHandlingButton}" Content="Remove All"
                        Command="{Binding RemoveAllSpectraCommand}" />
            </StackPanel>
        </Grid>

        <!-- Averaging progress bar -->
        <Grid x:Name="ProgressBarDockPanel" Grid.Row="1" Grid.Column="0" Grid.ColumnSpan="2" HorizontalAlignment="Stretch"
                   Visibility="{Binding ProgressBarVisibility, Converter={local:BooleanToVisibilityConverter}}" >

            <ProgressBar Style="{DynamicResource ProgressBarStyle1}"  Value="{Binding SpectraProcessingComplete}" Minimum="0" 
                          Maximum="{Binding SpectraFilePaths.Count}" HorizontalAlignment="Stretch" HorizontalContentAlignment="Stretch"
                           Foreground="{StaticResource WordLightBlueBrush}"
                          Margin="10 0 10 0"/>


            <TextBlock  Style="{StaticResource ProgressTextBlockStyle}" HorizontalAlignment="Center" VerticalAlignment="Center"
                        Text="{Binding ProcessingText}" />



        </Grid>

        <!-- Averaging options label  -->
        <Label Content="Averaging Options" Grid.Row="2" Grid.Column="0"></Label>
        
        <!-- Averaging Options Text Boxes -->
        <StackPanel Name="OptionsBoxesStackPanel" Grid.Row="3" Grid.Column="0" DataContext="{Binding AveragingOptionsViewModel}" 
                    HorizontalAlignment="Stretch">

            <!-- File Averaging Type -->
            <GroupBox Header="File Averaging Type" Style="{StaticResource GroupBoxStyle}" >
                <ListBox ItemsSource="{Binding SpectraFileProcessingTypes}" SelectedItem="{Binding SpectraFileProcessingType}">
                    <ListBox.ItemContainerStyle>
                        <Style TargetType="{x:Type ListBoxItem}">
                            <Setter Property="Template" >
                                <Setter.Value>
                                    <ControlTemplate TargetType="{x:Type ListBoxItem}">
                                        <ContentPresenter />
                                    </ControlTemplate>
                                </Setter.Value>
                            </Setter>
                        </Style>
                    </ListBox.ItemContainerStyle>
                    <ListBox.ItemTemplate>
                        <DataTemplate>
                            <RadioButton Content="{Binding Converter={local:DataStructureToStringConverter}}" Margin="20 0 0 0">
                                <RadioButton.IsChecked>
                                    <Binding Path="IsSelected" RelativeSource="{RelativeSource AncestorType=ListBoxItem}" Mode="TwoWay" />
                                </RadioButton.IsChecked>
                            </RadioButton>
                        </DataTemplate>
                    </ListBox.ItemTemplate>
                </ListBox>
            </GroupBox>

            <!-- File Averaging Specific Options -->
            <GroupBox Header="File Type Specific Options" Style="{StaticResource GroupBoxStyle}" 
                      Opacity="{Binding SpectraFileProcessingType, Converter={local:SpectraFileProcessingTypeToOpacityConverter}}">
                <ListBox>
                    <StackPanel>
                        <!-- Number of scans to average -->
                        <StackPanel Style="{StaticResource ValueEnteringStackPanel}" Margin="1"
                                    Opacity="{Binding SpectraFileProcessingType, Converter={local:SpectraFileProcessingTypeToNumberOpacityConverter}}">
                            <Label Content="Number of Scans To Average" Width="220"
                                   ToolTip="How many scans from the file should be averaged at a time" />
                            <local:IntegerTextBox Text="{Binding NumberOfScansToAverage}" Style="{StaticResource TextBoxStyle}"
                                     IsReadOnly="{Binding SpectraFileProcessingType, Converter={local:SpectraFileProcessingTypeToNumberToAverageReadOnlyConverter}}"/>
                        </StackPanel>

                        <!-- scan overlap -->
                        <StackPanel Style="{StaticResource ValueEnteringStackPanel}" Margin="1" 
                                    Opacity="{Binding SpectraFileProcessingType, Converter={local:SpectraFileProcessingTypeToOverlapOpacityConverter}}">
                            <Label Content="Scan Overlap" Width="220"
                                   ToolTip="Number of scans that should overlap while averaging" />
                            <local:IntegerTextBox Text="{Binding ScanOverlap}" Style="{StaticResource TextBoxStyle}"
                                     IsReadOnly="{Binding SpectraFileProcessingType, Converter={local:SpectraFileProcessingTypeToOverlapReadOnlyConverter}}"/>
                        </StackPanel>
                    </StackPanel>
                </ListBox>
                
            </GroupBox>

            <!-- Output Options -->
            <GroupBox Header="Output Options" Style="{StaticResource GroupBoxStyle}">
                <ListBox ItemsSource="{Binding OutputTypes}" SelectedItem="{Binding OutputType}">
                    <ListBox.ItemContainerStyle>
                        <Style TargetType="{x:Type ListBoxItem}">
                            <Setter Property="Template" >
                                <Setter.Value>
                                    <ControlTemplate TargetType="{x:Type ListBoxItem}">
                                        <ContentPresenter />
                                    </ControlTemplate>
                                </Setter.Value>
                            </Setter>
                        </Style>
                    </ListBox.ItemContainerStyle>
                    <ListBox.ItemTemplate>
                        <DataTemplate>
                            <RadioButton Content="{Binding Converter={local:DataStructureToStringConverter}}" Margin="20 0 0 0">
                                <RadioButton.IsChecked>
                                    <Binding Path="IsSelected" RelativeSource="{RelativeSource AncestorType=ListBoxItem}" Mode="TwoWay" />
                                </RadioButton.IsChecked>
                            </RadioButton>
                        </DataTemplate>
                    </ListBox.ItemTemplate>
                </ListBox>
            </GroupBox>
        </StackPanel>

        <!-- Averaging Radio Buttons -->
        <StackPanel Name="OptionsContentStackPanel"  Grid.Row="3" Grid.Column="1" DataContext="{Binding AveragingOptionsViewModel}"
                    HorizontalAlignment="Stretch">

            <!-- Normalization -->
            <GroupBox Header="Normalization" Style="{StaticResource GroupBoxStyle}">
                <CheckBox Content="Perform Normalization" Margin="20 0 0 0" IsChecked="{Binding PerformNormalization}"
                          Background="{StaticResource BackgroundLightBrush}"/>
            </GroupBox>

            <!-- Outlier Rejection -->
            <GroupBox Header="Outlier Rejection" Style="{StaticResource GroupBoxStyle}">

                <ListBox ItemsSource="{Binding RejectionTypes}" SelectedItem="{Binding RejectionType}">
                    <ListBox.ItemContainerStyle>
                        <Style TargetType="{x:Type ListBoxItem}">
                            <Setter Property="Template" >
                                <Setter.Value>
                                    <ControlTemplate TargetType="{x:Type ListBoxItem}">
                                        <ContentPresenter />
                                    </ControlTemplate>
                                </Setter.Value>
                            </Setter>
                        </Style>
                    </ListBox.ItemContainerStyle>
                    <ListBox.ItemTemplate>
                        <DataTemplate>
                            <RadioButton Content="{Binding Converter={local:DataStructureToStringConverter}}" Margin="20 0 0 0">
                                <RadioButton.IsChecked>
                                    <Binding Path="IsSelected" RelativeSource="{RelativeSource AncestorType=ListBoxItem}" Mode="TwoWay" />
                                </RadioButton.IsChecked>
                            </RadioButton>
                        </DataTemplate>
                    </ListBox.ItemTemplate>
                </ListBox>


            </GroupBox>

            <!-- Bin Weighting -->
            <GroupBox Header="Bin Weighting" Style="{StaticResource GroupBoxStyle}">
                <ListBox ItemsSource="{Binding WeightingTypes}" SelectedItem="{Binding WeightingType}">
                    <ListBox.ItemContainerStyle>
                        <Style TargetType="{x:Type ListBoxItem}">
                            <Setter Property="Template" >
                                <Setter.Value>
                                    <ControlTemplate TargetType="{x:Type ListBoxItem}">
                                        <ContentPresenter />
                                    </ControlTemplate>
                                </Setter.Value>
                            </Setter>
                        </Style>
                    </ListBox.ItemContainerStyle>
                    <ListBox.ItemTemplate>
                        <DataTemplate>
                            <RadioButton Content="{Binding Converter={local:DataStructureToStringConverter}}" Margin="20 0 0 0">
                                <RadioButton.IsChecked>
                                    <Binding Path="IsSelected" RelativeSource="{RelativeSource AncestorType=ListBoxItem}" Mode="TwoWay" />
                                </RadioButton.IsChecked>
                            </RadioButton>
                        </DataTemplate>
                    </ListBox.ItemTemplate>
                </ListBox>
            </GroupBox>
        </StackPanel>

        <Grid Grid.Row="4" Grid.Column="0" Grid.ColumnSpan="2"  DataContext="{Binding AveragingOptionsViewModel}"
                    HorizontalAlignment="Stretch" >
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="*" />
                <ColumnDefinition Width="*" />
            </Grid.ColumnDefinitions>

            <StackPanel Grid.Column="0">
                <!-- Bin Size -->
                <StackPanel Style="{StaticResource ValueEnteringStackPanel}">
                    <Label Content="Bin Size" Width="160" 
                           ToolTip="Size of each bin in Thompson units"/>
                    <local:DoubleTextBox Text="{Binding BinSize}" Style="{StaticResource TextBoxStyle}"/>
                </StackPanel>

                <!-- Percentile -->
                <StackPanel Style="{StaticResource ValueEnteringStackPanel}"
                            Opacity="{Binding RejectionType, Converter={local:OutlierRejectionTypeToPercentileOpacityConverter}}">
                    <Label Content="Percentile" Width="160"
                           ToolTip="Distance away from the mean in percentile units before the point is rejected as an outlier in Percentile Clipping"/>
                    <local:DoubleTextBox Text="{Binding Percentile}" Style="{StaticResource TextBoxStyle}" 
                                         IsReadOnly="{Binding RejectionType, Converter={local:OutlierRejectionTypeToPercentileReadOnlyConverter}}"/>
                </StackPanel>
            </StackPanel>
            <StackPanel Grid.Column="1"  >
                <!-- Min Sigma Value -->
                <StackPanel Style="{StaticResource ValueEnteringStackPanel}"
                            Opacity="{Binding RejectionType, Converter={local:OutlierRejectionTypeToSigmaOpacityConverter}}">
                    <Label Content="Minimum Sigma Value" Width="160"
                           ToolTip="Minimum distance in standard deviation units allowed before the point is rejected as an outlier"/>
                    <local:DoubleTextBox Text="{Binding MinSigmaVale}" Style="{StaticResource TextBoxStyle}"
                                         IsReadOnly="{Binding RejectionType, Converter={local:OutlierRejectionTypeToSigmaReadOnlyConverter}}"/>
                </StackPanel>

                <!-- Max Sigma Value -->
                <StackPanel Style="{StaticResource ValueEnteringStackPanel}"
                            Opacity="{Binding RejectionType, Converter={local:OutlierRejectionTypeToSigmaOpacityConverter}}">
                    <Label Content="Maximum Sigma Value" Width="160" 
                           ToolTip="Maximum distance in standard deviation units allowed before the point is rejected as an outlier"/>
                    <local:DoubleTextBox Text="{Binding MaxSigmaValue}" Style="{StaticResource TextBoxStyle}"
                                         IsReadOnly="{Binding RejectionType, Converter={local:OutlierRejectionTypeToSigmaReadOnlyConverter}}"/>
                </StackPanel>
            </StackPanel>
        </Grid>

        <!-- Bottom Buttons -->
        <StackPanel Grid.Row="5" Grid.Column="0" Grid.ColumnSpan="2" Orientation="Horizontal" HorizontalAlignment="Center">
            <Button Content="Save As Default" Style="{StaticResource SpectraHandlingButton}" Width="130" Height="25"
                    Command="{Binding SaveAsDefaultCommand}" Margin="5"/>
            <Button Content="Average Spectra" Style="{StaticResource SpectraHandlingButton}" Width="180" Height="40"
                    Command="{Binding AverageSpectraCommand}" Margin="5"/>
            <Button Content="Reset Defaults" Style="{StaticResource SpectraHandlingButton}" Width="130" Height="25"
                    Command="{Binding ResetDefaultsCommand}" Margin="5"/>
        </StackPanel>

    </Grid>
</UserControl>
